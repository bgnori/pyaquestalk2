#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Fri Sep 24 19:37:46 2010 by generateDS.py version 2.2a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_str_lower(self, instring):
            return instring.lower()
                    
                    

#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class ResultSet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ma_result=None, uniq_result=None):
        self.ma_result = ma_result
        self.uniq_result = uniq_result
    def factory(*args_, **kwargs_):
        if ResultSet.subclass:
            return ResultSet.subclass(*args_, **kwargs_)
        else:
            return ResultSet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ma_result(self): return self.ma_result
    def set_ma_result(self, ma_result): self.ma_result = ma_result
    def get_uniq_result(self): return self.uniq_result
    def set_uniq_result(self, uniq_result): self.uniq_result = uniq_result
    def export(self, outfile, level, namespace_='', name_='ResultSet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='ResultSet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='ResultSet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ResultSet'):
        if self.ma_result:
            self.ma_result.export(outfile, level, namespace_, name_='ma_result')
        if self.uniq_result:
            self.uniq_result.export(outfile, level, namespace_, name_='uniq_result')
    def hasContent_(self):
        if (
            self.ma_result is not None or
            self.uniq_result is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ResultSet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ma_result is not None:
            showIndent(outfile, level)
            outfile.write('ma_result=model_.result_type(\n')
            self.ma_result.exportLiteral(outfile, level, name_='ma_result')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.uniq_result is not None:
            showIndent(outfile, level)
            outfile.write('uniq_result=model_.result_type(\n')
            self.uniq_result.exportLiteral(outfile, level, name_='uniq_result')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'ma_result': 
            obj_ = result_type.factory()
            obj_.build(child_)
            self.set_ma_result(obj_)
        elif nodeName_ == 'uniq_result': 
            obj_ = result_type.factory()
            obj_.build(child_)
            self.set_uniq_result(obj_)
# end class ResultSet


class result_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, total_count=None, filtered_count=None, word_list=None):
        self.total_count = total_count
        self.filtered_count = filtered_count
        self.word_list = word_list
    def factory(*args_, **kwargs_):
        if result_type.subclass:
            return result_type.subclass(*args_, **kwargs_)
        else:
            return result_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_total_count(self): return self.total_count
    def set_total_count(self, total_count): self.total_count = total_count
    def get_filtered_count(self): return self.filtered_count
    def set_filtered_count(self, filtered_count): self.filtered_count = filtered_count
    def get_word_list(self): return self.word_list
    def set_word_list(self, word_list): self.word_list = word_list
    def export(self, outfile, level, namespace_='', name_='result_type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='result_type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='result_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='result_type'):
        if self.total_count is not None:
            showIndent(outfile, level)
            outfile.write('<%stotal_count>%s</%stotal_count>\n' % (namespace_, self.gds_format_integer(self.total_count, input_name='total_count'), namespace_))
        if self.filtered_count is not None:
            showIndent(outfile, level)
            outfile.write('<%sfiltered_count>%s</%sfiltered_count>\n' % (namespace_, self.gds_format_integer(self.filtered_count, input_name='filtered_count'), namespace_))
        if self.word_list:
            self.word_list.export(outfile, level, namespace_, name_='word_list', )
    def hasContent_(self):
        if (
            self.total_count is not None or
            self.filtered_count is not None or
            self.word_list is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='result_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.total_count is not None:
            showIndent(outfile, level)
            outfile.write('total_count=%d,\n' % self.total_count)
        if self.filtered_count is not None:
            showIndent(outfile, level)
            outfile.write('filtered_count=%d,\n' % self.filtered_count)
        if self.word_list is not None:
            showIndent(outfile, level)
            outfile.write('word_list=model_.word_list_type(\n')
            self.word_list.exportLiteral(outfile, level, name_='word_list')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'total_count':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            self.total_count = ival_
        elif nodeName_ == 'filtered_count':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            self.filtered_count = ival_
        elif nodeName_ == 'word_list': 
            obj_ = word_list_type.factory()
            obj_.build(child_)
            self.set_word_list(obj_)
# end class result_type


class word_list_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, word=None):
        if word is None:
            self.word = []
        else:
            self.word = word
    def factory(*args_, **kwargs_):
        if word_list_type.subclass:
            return word_list_type.subclass(*args_, **kwargs_)
        else:
            return word_list_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_word(self): return self.word
    def set_word(self, word): self.word = word
    def add_word(self, value): self.word.append(value)
    def insert_word(self, index, value): self.word[index] = value
    def export(self, outfile, level, namespace_='', name_='word_list_type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='word_list_type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='word_list_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='word_list_type'):
        for word_ in self.word:
            word_.export(outfile, level, namespace_, name_='word')
    def hasContent_(self):
        if (
            self.word
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='word_list_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('word=[\n')
        level += 1
        for word_ in self.word:
            showIndent(outfile, level)
            outfile.write('model_.word_type(\n')
            word_.exportLiteral(outfile, level, name_='word_type')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'word': 
            obj_ = word_type.factory()
            obj_.build(child_)
            self.word.append(obj_)
# end class word_list_type


class word_type(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, surface=None, reading=None, pos=None, baseform=None, feature=None, count=None):
        self.surface = surface
        self.reading = reading
        self.pos = pos
        self.baseform = baseform
        self.feature = feature
        self.count = count
    def factory(*args_, **kwargs_):
        if word_type.subclass:
            return word_type.subclass(*args_, **kwargs_)
        else:
            return word_type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_surface(self): return self.surface
    def set_surface(self, surface): self.surface = surface
    def get_reading(self): return self.reading
    def set_reading(self, reading): self.reading = reading
    def get_pos(self): return self.pos
    def set_pos(self, pos): self.pos = pos
    def get_baseform(self): return self.baseform
    def set_baseform(self, baseform): self.baseform = baseform
    def get_feature(self): return self.feature
    def set_feature(self, feature): self.feature = feature
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def export(self, outfile, level, namespace_='', name_='word_type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='word_type')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='word_type'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='word_type'):
        if self.surface is not None:
            showIndent(outfile, level)
            outfile.write('<%ssurface>%s</%ssurface>\n' % (namespace_, self.gds_format_string(quote_xml(self.surface).encode(ExternalEncoding), input_name='surface'), namespace_))
        if self.reading is not None:
            showIndent(outfile, level)
            outfile.write('<%sreading>%s</%sreading>\n' % (namespace_, self.gds_format_string(quote_xml(self.reading).encode(ExternalEncoding), input_name='reading'), namespace_))
        if self.pos is not None:
            showIndent(outfile, level)
            outfile.write('<%spos>%s</%spos>\n' % (namespace_, self.gds_format_string(quote_xml(self.pos).encode(ExternalEncoding), input_name='pos'), namespace_))
        if self.baseform is not None:
            showIndent(outfile, level)
            outfile.write('<%sbaseform>%s</%sbaseform>\n' % (namespace_, self.gds_format_string(quote_xml(self.baseform).encode(ExternalEncoding), input_name='baseform'), namespace_))
        if self.feature is not None:
            showIndent(outfile, level)
            outfile.write('<%sfeature>%s</%sfeature>\n' % (namespace_, self.gds_format_string(quote_xml(self.feature).encode(ExternalEncoding), input_name='feature'), namespace_))
        if self.count is not None:
            showIndent(outfile, level)
            outfile.write('<%scount>%s</%scount>\n' % (namespace_, self.gds_format_integer(self.count, input_name='count'), namespace_))
    def hasContent_(self):
        if (
            self.surface is not None or
            self.reading is not None or
            self.pos is not None or
            self.baseform is not None or
            self.feature is not None or
            self.count is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='word_type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.surface is not None:
            showIndent(outfile, level)
            outfile.write('surface=%s,\n' % quote_python(self.surface).encode(ExternalEncoding))
        if self.reading is not None:
            showIndent(outfile, level)
            outfile.write('reading=%s,\n' % quote_python(self.reading).encode(ExternalEncoding))
        if self.pos is not None:
            showIndent(outfile, level)
            outfile.write('pos=%s,\n' % quote_python(self.pos).encode(ExternalEncoding))
        if self.baseform is not None:
            showIndent(outfile, level)
            outfile.write('baseform=%s,\n' % quote_python(self.baseform).encode(ExternalEncoding))
        if self.feature is not None:
            showIndent(outfile, level)
            outfile.write('feature=%s,\n' % quote_python(self.feature).encode(ExternalEncoding))
        if self.count is not None:
            showIndent(outfile, level)
            outfile.write('count=%d,\n' % self.count)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, nodeName_, from_subclass=False):
        if nodeName_ == 'surface':
            surface_ = child_.text
            self.surface = surface_
        elif nodeName_ == 'reading':
            reading_ = child_.text
            self.reading = reading_
        elif nodeName_ == 'pos':
            pos_ = child_.text
            self.pos = pos_
        elif nodeName_ == 'baseform':
            baseform_ = child_.text
            self.baseform = baseform_
        elif nodeName_ == 'feature':
            feature_ = child_.text
            self.feature = feature_
        elif nodeName_ == 'count':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            self.count = ival_
# end class word_type


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ResultSet'
        rootClass = ResultSet
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ResultSet'
        rootClass = ResultSet
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    return rootObj
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="ResultSet",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ResultSet'
        rootClass = ResultSet
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from res import *\n\n')
    sys.stdout.write('import res as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

